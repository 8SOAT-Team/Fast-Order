name: pipeline

on:
  push:
    branches:
      - main
      
jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Fast-Order.sln

      - name: Run unit tests
        run: dotnet test Fast-Order.sln --collect:"XPlat Code Coverage" --results-directory TestResults --logger trx

      - name: List TestResults directory
        run: ls -R TestResults
  
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
  
      - name: Find Coverage Report
        id: coverage-path
        run: echo "COVERAGE_PATH=$(find TestResults -name 'coverage.cobertura.xml' | head -n 1)" >> $GITHUB_ENV
      
      - name: Generate Coverage Report
        run: |
          reportgenerator \
            -reports:"$COVERAGE_PATH" \
            -targetdir:coverage-report \
            -reporttypes:Html
  
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report

  build:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Fast-Order.sln

      - name: Build project
        run: dotnet build Fast-Order.sln --configuration Release

      - name: Publish artifact
        run: dotnet publish Fast-Order.sln --configuration Release --output ./output
        env:
          DOTNET_CLI_HOME: ${{ github.workspace }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ./output

  deploy-Prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod

    steps:
      - name: Deploy to PROD
        run: echo "Deploying to PROD environment"

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: AWS-PRO
      url: https://8c5f31e2a9a84bb115f4dd4821407c85.gr7.us-east-1.eks.amazonaws.com/

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: ./output    
