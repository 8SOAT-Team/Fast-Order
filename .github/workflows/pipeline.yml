name: pipeline

on:
  push:
    branches:
      - main
      - develop
      - release

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Fast-Order.sln

      - name: Run unit tests
        run: dotnet test Fast-Order.sln --collect:"XPlat Code Coverage" --logger trx

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report

      - name: Generate coverage badge
        id: generate-badge
        uses: cicirello/jacoco-badge-generator@v2.0.1
        with:
          coverage-file: TestResults/Coverage.cobertura.xml

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Fast-Order.sln

      - name: Build project
        run: dotnet build Fast-Order.sln --configuration Release

      - name: Publish artifact
        run: dotnet publish Fast-Order.sln --configuration Release --output ./output
        env:
          DOTNET_CLI_HOME: ${{ github.workspace }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ./output

  deploy-STG:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: stg

    steps:
      - name: Deploy to STG
        run: echo "Deploying to STG environment"

  deploy-Pre:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre

    steps:
      - name: Deploy to PRE
        run: echo "Deploying to PRE environment"

  deploy-Prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod

    steps:
      - name: Deploy to PROD
        run: echo "Deploying to PROD environment"

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: AWS-PRO
      url: http://devopsfiap-0n-env-1.eba-a9357rgy.us-east-1.elasticbeanstalk.com/

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: ./output

      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: DevopsFiap-0n
          environment_name: DevopsFiap-0n-env-1
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: ./output/
